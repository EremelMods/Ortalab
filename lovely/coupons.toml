[manifest]
version = "1.0.0"
dump_lua = true
priority = 1

# Catalog
[[patches]]
[patches.pattern]
target = 'game.lua'
pattern = '''G.GAME.current_round.used_packs = G.GAME.current_round.used_packs or {}'''
position = 'before'
match_indent = true
payload = '''--if i == 1 and G.GAME.modifiers.ortalab_boosters then for _ = 1, G.GAME.modifiers.ortalab_boosters do Ortalab.spawn_booster() end end'''

[[patches]]
[patches.pattern]
target = 'card.lua'
pattern = '''G.GAME.pack_choices = self.ability.choose or self.config.center.config.choose or 1'''
position = 'after'
match_indent = true
payload = '''
if self.config.center.ortalab_type == 'Loteria' then
    G.GAME.pack_choices = G.GAME.pack_choices + G.GAME.ortalab.vouchers.cantor
end'''

# Horoscope Coupon Increase Zodiac Pack Limit
[[patches]]
[patches.pattern]
target = 'card.lua'
match_indent = true
position = 'after'
pattern = '''
booster_obj = self.config.center
'''
payload = '''
if self.config.center.ortalab_type == 'Zodiac' then
    self.ability.extra = self.ability.extra + G.GAME.ortalab.vouchers.horoscope
end
'''

# Natal Sign Calculation
[[patches]]
[patches.pattern]
target = 'functions/state_events.lua'
pattern = '''local nu_chip, nu_mult = G.GAME.selected_back:trigger_effect{context = 'final_scoring_step', chips = hand_chips, mult = mult}'''
position = 'before'
match_indent = true
payload = '''
if G.GAME.used_vouchers.v_ortalab_natal_sign then
    for _, curr_zod in pairs(G.zodiacs) do
        if text == curr_zod.config.extra.hand_type then
            for i=1, math.floor(curr_zod.config.extra.temp_level / 4) do
                if not Ortalab.config.zodiac_skip then 
                    G.E_MANAGER:add_event(Event({
                        delay = 2/G.SETTINGS.GAMESPEED,
                        trigger = 'after',
                        func = (function()
                            attention_text({
                                text = 'X'..G.GAME.natal_sign_rate,
                                colour = G.C.WHITE,
                                scale = 1, 
                                hold = 2/G.SETTINGS.GAMESPEED,
                                cover = curr_zod.HUD_zodiac,
                                cover_colour = G.C.RED,
                                align = 'cm',
                                })
                            play_sound('multhit2', 0.7, 0.4)
                            return true
                        end)
                    }))
                end
                mult = mod_mult(mult*G.GAME.natal_sign_rate)
                update_hand_text({delay = 0}, {mult = mult})
            end
        end
    end
end
'''

# Home Delivery
[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
match_indent = true
position = 'after'
pattern = '''
for i = 1, #G.GAME.tags do
    G.GAME.tags[i]:apply_to_run({type = 'immediate'})
end
for i = 1, #G.GAME.tags do
    if G.GAME.tags[i]:apply_to_run({type = 'new_blind_choice'}) then break end
end
'''
payload = '''
G.E_MANAGER:add_event(Event({
    trigger = 'after',
    func = function()
        if G.GAME.used_vouchers['v_ortalab_home_delivery'] then
            if G.blind_select then 
                G.blind_select:remove()
                G.blind_prompt_box:remove()
                G.blind_select = nil
            end
            G.GAME.current_round.used_packs = {}
            G.GAME.current_round.jokers_purchased = 0
            G.GAME.current_round.reroll_cost_increase = 0
            G.GAME.round_resets.temp_reroll_cost = nil
            G.GAME.current_round.free_rerolls = G.GAME.round_resets.free_rerolls
            calculate_reroll_cost(true)

            G.E_MANAGER:add_event(Event({
                trigger = 'after',
                blocking = false,
                func = function()
                if #G.E_MANAGER.queues.base > 2 or G.GAME.PACK_INTERRUPT then return false end
                    G.STATE = G.STATES.SHOP
                    G.STATE_COMPLETE = false
                    return true
                end
            }))
        end
        return true
end}))
'''

# hone/glowup inverse
[[patches]]
[patches.pattern]
target = '=[SMODS _ "src/utils.lua"]'
match_indent = true
position = 'after'
pattern = '''
if key ~= 'smods' then
    if type(effect) == 'table' then
        local calc = SMODS.calculate_effect(effect, effect.scored_card or card, key == 'edition')
        for k,v in pairs(calc) do ret[k] = v end
    end
end
'''
payload = '''
if key == 'edition' and ret.calculated then
    if type(effect) == 'table' and not effect.swap and effect.card.ability.set == 'Joker' then
        local edition_reps = {}
        for _, voucher in pairs(G.vouchers.cards) do
            if voucher.ability and type(voucher.ability.extra) == 'table' and voucher.ability.extra.edition_reps then
                for i=1, voucher.ability.extra.edition_reps do
                    edition_reps[#edition_reps+1] = {message = localize('k_again_ex'), colour = G.C.DARK_EDITION, card = voucher}
                end
            end
        end
        for _, rep_eff in pairs(edition_reps) do
            SMODS.calculate_effect(rep_eff, rep_eff.card, key == 'edition')
            SMODS.calculate_effect(effect, card, key == 'edition')
        end
    end
end
'''

# Money coupons
[[patches]]
[patches.pattern]
target = 'blind.lua'
match_indent = true
position = 'before'
pattern = '''
if G.GAME.modifiers.no_blind_reward and G.GAME.modifiers.no_blind_reward[self:get_type()] then self.dollars = 0 end 
'''
payload = '''
if G.GAME.ortalab.blind_rewards then self.dollars = self.dollars + G.GAME.ortalab.blind_rewards end
'''

# comment
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
match_indent = true
position = 'before'
pattern = '''
G.GAME.orbital_choices = G.GAME.orbital_choices or {}
'''
payload = '''
local dollars = blind_choice.config.dollars
if G.GAME.ortalab.blind_rewards then dollars = dollars + G.GAME.ortalab.blind_rewards end
'''
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
match_indent = true
position = 'at'
pattern = '''
{n=G.UIT.T, config={text = string.rep(localize("$"), blind_choice.config.dollars)..'+', scale = 0.35, colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.MONEY, shadow = not disabled}}
'''
payload = '''
{n=G.UIT.T, config={text = dollars < 10 and string.rep(localize("$"), dollars)..'+' or localize("$")..dollars..'+', scale = 0.35, colour = disabled and G.C.UI.TEXT_INACTIVE or G.C.MONEY, shadow = not disabled}}
'''
[[patches]]
[patches.pattern]
target = 'blind.lua'
match_indent = true
position = 'at'
pattern = '''
G.GAME.current_round.dollars_to_be_earned = self.dollars > 0 and (string.rep(localize('$'), self.dollars)..'') or ('')
'''
payload = '''
G.GAME.current_round.dollars_to_be_earned = self.dollars > 0 and (self.dollars < 10 and string.rep(localize('$'), self.dollars)..'' or localize('$')..self.dollars) or ('')
'''

# UI for rigged game
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
match_indent = true
position = 'before'
pattern = '''
G.GAME.round_resets.blind_ante = G.GAME.round_resets.blind_ante or G.GAME.round_resets.ante
'''
payload = '''
local alt_button
if G.GAME.ortalab.alt_boss then
    local alt_blind = G.P_BLINDS[G.GAME.ortalab.alt_boss]
    local alt_blind_name = localize{type = 'name_text', key = alt_blind.key, set = 'Blind'}
    local alt_blind_col = alt_blind.boss_colour
    if type == 'Boss' then
        alt_button = {n=G.UIT.R, config={align = "cm", r = 0.1, outline = 1, outline_colour = alt_blind_col, colour = darken(alt_blind_col, 0.6), maxw = 2.4, emboss = 0.1, padding = 0.07, line_emboss = 0.8, button = 'swap_blind'}, nodes={
                {n=G.UIT.O, config={object = DynaText({string = alt_blind_name, colours = {G.C.UI.TEXT_INACTIVE}, shadow = not disabled, float = false, y_offset = -4, scale = 0.35, maxw =2.2})}},
            }}
    end
end
'''
# Add button to display
[[patches]]
[patches.pattern]
target = 'functions/UI_definitions.lua'
match_indent = true
position = 'before'
pattern = '''
{n=G.UIT.R, config={align = "cm", r = 0.1, outline = 1, outline_colour = blind_col, colour = darken(blind_col, 0.3), minw = 2.9, emboss = 0.1, padding = 0.07, line_emboss = 1}, nodes={
'''
payload = '''
alt_button and alt_button or nil,
'''
# Reroll extra boss
[[patches]]
[patches.pattern]
target = 'functions/button_callbacks.lua'
match_indent = true
position = 'after'
pattern = '''
G.GAME.round_resets.blind_choices.Boss = get_new_boss()
'''
payload = '''
if G.GAME.ortalab.alt_boss then G.GAME.ortalab.alt_boss = get_new_boss() end
'''
